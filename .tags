!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
$(NAME)	Makefile	/^$(NAME):$/;"	t
$(NAME)	libft/Makefile	/^$(NAME): $(OBJS) $/;"	t
$(NAME)	minilibx/Makefile.mk	/^$(NAME)	: $(OBJ)$/;"	t
$(NAME)	minilibx/test/Makefile.mk	/^$(NAME): $(OBJ)$/;"	t
$(OBJS)	libft/Makefile	/^$(OBJS): %.o: %.c$/;"	t
$(OBJ_DIR)/%.o	minilibx/Makefile.mk	/^$(OBJ_DIR)\/%.o: %.c$/;"	t
%.o	libft/Makefile	/^$(OBJS): %.o: %.c$/;"	t
A	Includes/structs.h	/^# define A /;"	d
AUTHOR	minilibx/man/man1/mlx.1	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	minilibx/man/man1/mlx_loop.1	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	minilibx/man/man1/mlx_new_image.1	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	minilibx/man/man1/mlx_new_window.1	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	minilibx/man/man1/mlx_pixel_put.1	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	minilibx/man/man3/mlx.3	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	minilibx/man/man3/mlx_loop.3	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	minilibx/man/man3/mlx_new_image.3	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	minilibx/man/man3/mlx_new_window.3	/^.SH AUTHOR$/;"	s	title:MiniLibX
AUTHOR	minilibx/man/man3/mlx_pixel_put.3	/^.SH AUTHOR$/;"	s	title:MiniLibX
BUFFER_SIZE	libft/get_next_line_bonus.h	/^#  define BUFFER_SIZE /;"	d
CAMERA_HEIGHT	Includes/structs.h	/^# define CAMERA_HEIGHT /;"	d
CC	libft/Makefile	/^CC = cc$/;"	m
CC	minilibx/Makefile.mk	/^	CC = clang$/;"	m
CC	minilibx/Makefile.mk	/^CC	= gcc$/;"	m
CC	minilibx/test/Makefile.mk	/^	CC	= gcc$/;"	m
CC	minilibx/test/Makefile.mk	/^	CC = clang$/;"	m
CFLAGS	libft/Makefile	/^CFLAGS = -Wall -Wextra -Werror -g$/;"	m
CFLAGS	minilibx/Makefile.mk	/^CFLAGS	= -O3 -I$(INC)$/;"	m
CFLAGS	minilibx/test/Makefile.mk	/^CFLAGS= -I$(INC) -O3 -I.. -g$/;"	m
COLOR	minilibx/man/man1/mlx_pixel_put.1	/^.SH COLOR MANAGEMENT$/;"	s	title:MiniLibX
COLOR	minilibx/man/man3/mlx_pixel_put.3	/^.SH COLOR MANAGEMENT$/;"	s	title:MiniLibX
CUB3D	README.md	/^# CUB3D$/;"	c
D	Includes/structs.h	/^# define D /;"	d
DESCRIPTION	minilibx/man/man1/mlx.1	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	minilibx/man/man1/mlx_loop.1	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	minilibx/man/man1/mlx_new_image.1	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	minilibx/man/man1/mlx_new_window.1	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	minilibx/man/man1/mlx_pixel_put.1	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	minilibx/man/man3/mlx.3	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	minilibx/man/man3/mlx_loop.3	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	minilibx/man/man3/mlx_new_image.3	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	minilibx/man/man3/mlx_new_window.3	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
DESCRIPTION	minilibx/man/man3/mlx_pixel_put.3	/^.SH DESCRIPTION$/;"	s	title:MiniLibX
ENV_DISPLAY	minilibx/mlx_int.h	/^# define ENV_DISPLAY /;"	d
EOF	minilibx/configure	/^cat <<EOF$/;"	h
ERROR	libft/libft.h	/^	ERROR = -1$/;"	e	enum:e_bool
ERR_NO_TRUECOLOR	minilibx/mlx_int.h	/^# define ERR_NO_TRUECOLOR /;"	d
ESC	Includes/structs.h	/^# define ESC /;"	d
FALSE	libft/libft.h	/^	FALSE, \/\/ 0$/;"	e	enum:e_bool
FOV	Includes/structs.h	/^# define FOV /;"	d
FT_PRINTF	Makefile	/^FT_PRINTF = libft$/;"	m
FT_PRINTF_H	libft/ft_printf.h	/^# define FT_PRINTF_H$/;"	d
FUNCTIONS_H	Includes/functions.h	/^# define FUNCTIONS_H$/;"	d
GET_NEXT_LINE_BONUS_H	libft/get_next_line_bonus.h	/^# define GET_NEXT_LINE_BONUS_H$/;"	d
GOING	minilibx/man/man1/mlx_loop.1	/^.SH GOING FURTHER WITH EVENTS$/;"	s	title:MiniLibX
GOING	minilibx/man/man3/mlx_loop.3	/^.SH GOING FURTHER WITH EVENTS$/;"	s	title:MiniLibX
HOW THE FUCK DOES RAYCASTING WORK	README.md	/^## HOW THE FUCK DOES RAYCASTING WORK$/;"	s
IM1_SX	minilibx/test/main.c	/^#define	IM1_SX	/;"	d	file:
IM1_SY	minilibx/test/main.c	/^#define	IM1_SY	/;"	d	file:
IM3_SX	minilibx/test/main.c	/^#define	IM3_SX	/;"	d	file:
IM3_SY	minilibx/test/main.c	/^#define	IM3_SY	/;"	d	file:
INC	minilibx/Makefile.mk	/^INC	=%%%%$/;"	m
INC	minilibx/test/Makefile.mk	/^INC=%%%%$/;"	m
INCLIB	minilibx/test/Makefile.mk	/^INCLIB=$(INC)\/..\/lib$/;"	m
INCLUDE	minilibx/man/man1/mlx.1	/^.SH INCLUDE FILE$/;"	s	title:MiniLibX
INCLUDE	minilibx/man/man3/mlx.3	/^.SH INCLUDE FILE$/;"	s	title:MiniLibX
INCLUDES	Makefile	/^INCLUDES =	Includes\/ libft\/$/;"	m
LFLAGS	minilibx/test/Makefile.mk	/^LFLAGS = -L.. -lmlx -L$(INCLIB) -lXext -lX11 -lm$/;"	m
LIB	Makefile	/^LIB = libft\/libftprintf.a$/;"	m
LIBFT_H	libft/libft.h	/^# define LIBFT_H$/;"	d
LIBRARY	minilibx/man/man1/mlx.1	/^.SH LIBRARY FUNCTIONS$/;"	s	title:MiniLibX
LIBRARY	minilibx/man/man3/mlx.3	/^.SH LIBRARY FUNCTIONS$/;"	s	title:MiniLibX
LINKING	minilibx/man/man1/mlx.1	/^.SH LINKING MiniLibX$/;"	s	title:MiniLibX
LINKING	minilibx/man/man3/mlx.3	/^.SH LINKING MiniLibX$/;"	s	title:MiniLibX
LOCALHOST	minilibx/mlx_int.h	/^# define LOCALHOST /;"	d
MAP Parsing	README.md	/^## MAP Parsing$/;"	s
MLX	Makefile	/^MLX = $(MLX_DIR)\/libmlx.a$/;"	m
MLXFLAGS	Makefile	/^MLXFLAGS = -lX11 -lXext -lm$/;"	m
MLX_DIR	Makefile	/^MLX_DIR = .\/minilibx$/;"	m
MLX_H	minilibx/mlx.h	/^#define	MLX_H$/;"	d
MLX_INT_H	minilibx/mlx_int.h	/^# define MLX_INT_H$/;"	d
MLX_MAX_EVENT	minilibx/mlx_int.h	/^# define MLX_MAX_EVENT /;"	d
MLX_TYPE_SHM	minilibx/mlx_int.h	/^# define MLX_TYPE_SHM /;"	d
MLX_TYPE_SHM_PIXMAP	minilibx/mlx_int.h	/^# define MLX_TYPE_SHM_PIXMAP /;"	d
MLX_TYPE_XIMAGE	minilibx/mlx_int.h	/^# define MLX_TYPE_XIMAGE /;"	d
MiniLibX	minilibx/man/man1/mlx.1	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	minilibx/man/man1/mlx_loop.1	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	minilibx/man/man1/mlx_new_image.1	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	minilibx/man/man1/mlx_new_window.1	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	minilibx/man/man1/mlx_pixel_put.1	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	minilibx/man/man3/mlx.3	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	minilibx/man/man3/mlx_loop.3	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	minilibx/man/man3/mlx_new_image.3	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	minilibx/man/man3/mlx_new_window.3	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
MiniLibX	minilibx/man/man3/mlx_pixel_put.3	/^.TH MiniLibX 3 "September 19, 2002"$/;"	t
NAME	Makefile	/^NAME = cub3D$/;"	m
NAME	libft/Makefile	/^NAME = libftprintf.a$/;"	m
NAME	minilibx/Makefile.mk	/^NAME		= libmlx.a$/;"	m
NAME	minilibx/man/man1/mlx.1	/^.SH NAME$/;"	s	title:MiniLibX
NAME	minilibx/man/man1/mlx_loop.1	/^.SH NAME$/;"	s	title:MiniLibX
NAME	minilibx/man/man1/mlx_new_image.1	/^.SH NAME$/;"	s	title:MiniLibX
NAME	minilibx/man/man1/mlx_new_window.1	/^.SH NAME$/;"	s	title:MiniLibX
NAME	minilibx/man/man1/mlx_pixel_put.1	/^.SH NAME$/;"	s	title:MiniLibX
NAME	minilibx/man/man3/mlx.3	/^.SH NAME$/;"	s	title:MiniLibX
NAME	minilibx/man/man3/mlx_loop.3	/^.SH NAME$/;"	s	title:MiniLibX
NAME	minilibx/man/man3/mlx_new_image.3	/^.SH NAME$/;"	s	title:MiniLibX
NAME	minilibx/man/man3/mlx_new_window.3	/^.SH NAME$/;"	s	title:MiniLibX
NAME	minilibx/man/man3/mlx_pixel_put.3	/^.SH NAME$/;"	s	title:MiniLibX
NAME	minilibx/test/Makefile.mk	/^NAME= mlx-test$/;"	m
NAME_UNAME	minilibx/Makefile.mk	/^NAME_UNAME	= libmlx_$(UNAME).a$/;"	m
OBJ	minilibx/Makefile.mk	/^OBJ	= $(addprefix $(OBJ_DIR)\/,$(SRC:%.c=%.o))$/;"	m
OBJ	minilibx/test/Makefile.mk	/^OBJ = $(SRC:%.c=%.o)$/;"	m
OBJS	libft/Makefile	/^OBJS = $(SRCS:.c=.o)$/;"	m
OBJ_DIR	minilibx/Makefile.mk	/^OBJ_DIR = obj$/;"	m
PARSING	Makefile	/^PARSING =	parsing\/map_check.c \\$/;"	m
RETURN	minilibx/man/man1/mlx.1	/^.SH RETURN VALUES$/;"	s	title:MiniLibX
RETURN	minilibx/man/man1/mlx_new_image.1	/^.SH RETURN VALUES$/;"	s	title:MiniLibX
RETURN	minilibx/man/man1/mlx_new_window.1	/^.SH RETURN VALUES$/;"	s	title:MiniLibX
RETURN	minilibx/man/man3/mlx.3	/^.SH RETURN VALUES$/;"	s	title:MiniLibX
RETURN	minilibx/man/man3/mlx_new_image.3	/^.SH RETURN VALUES$/;"	s	title:MiniLibX
RETURN	minilibx/man/man3/mlx_new_window.3	/^.SH RETURN VALUES$/;"	s	title:MiniLibX
RETURN	minilibx/mlx_xpm.c	/^#define	RETURN	/;"	d	file:
S	Includes/structs.h	/^# define S /;"	d
SCREEN_HEIGHT	Includes/structs.h	/^# define SCREEN_HEIGHT /;"	d
SCREEN_WIDTH	Includes/structs.h	/^# define SCREEN_WIDTH /;"	d
SEE	minilibx/man/man1/mlx.1	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	minilibx/man/man1/mlx_loop.1	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	minilibx/man/man1/mlx_new_image.1	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	minilibx/man/man1/mlx_new_window.1	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	minilibx/man/man1/mlx_pixel_put.1	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	minilibx/man/man3/mlx.3	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	minilibx/man/man3/mlx_loop.3	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	minilibx/man/man3/mlx_new_image.3	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	minilibx/man/man3/mlx_new_window.3	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SEE	minilibx/man/man3/mlx_pixel_put.3	/^.SH SEE ALSO$/;"	s	title:MiniLibX
SRC	Makefile	/^SRC = $(PARSING) $(SRCS)$/;"	m
SRC	minilibx/Makefile.mk	/^SRC	= mlx_init.c mlx_new_window.c mlx_pixel_put.c mlx_loop.c \\$/;"	m
SRC	minilibx/test/Makefile.mk	/^SRC = main.c$/;"	m
SRCS	Makefile	/^SRCS =	srcs\/main.c \\$/;"	m
SRCS	libft/Makefile	/^SRCS = \\$/;"	m
STORING	minilibx/man/man1/mlx_new_image.1	/^.SH STORING COLOR INSIDE IMAGES$/;"	s	title:MiniLibX
STORING	minilibx/man/man3/mlx_new_image.3	/^.SH STORING COLOR INSIDE IMAGES$/;"	s	title:MiniLibX
STRUCTS_H	Includes/structs.h	/^# define STRUCTS_H$/;"	d
SYNOPSYS	minilibx/man/man1/mlx.1	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	minilibx/man/man1/mlx_loop.1	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	minilibx/man/man1/mlx_new_image.1	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	minilibx/man/man1/mlx_new_window.1	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	minilibx/man/man1/mlx_pixel_put.1	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	minilibx/man/man3/mlx.3	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	minilibx/man/man3/mlx_loop.3	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	minilibx/man/man3/mlx_new_image.3	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	minilibx/man/man3/mlx_new_window.3	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
SYNOPSYS	minilibx/man/man3/mlx_pixel_put.3	/^.SH SYNOPSYS$/;"	s	title:MiniLibX
TO IMPLEMENT	README.md	/^## TO IMPLEMENT  $/;"	s
TRUE	libft/libft.h	/^	TRUE, \/\/ 1$/;"	e	enum:e_bool
UNAME	minilibx/Makefile.mk	/^UNAME = $(shell uname)$/;"	m
UNAME	minilibx/test/Makefile.mk	/^UNAME := $(shell uname)$/;"	m
W	Includes/structs.h	/^# define W /;"	d
WARN_SHM_ATTACH	minilibx/mlx_int.h	/^# define WARN_SHM_ATTACH /;"	d
WIN1_SX	minilibx/test/main.c	/^#define	WIN1_SX	/;"	d	file:
WIN1_SY	minilibx/test/main.c	/^#define	WIN1_SY	/;"	d	file:
X-WINDOW	minilibx/man/man1/mlx.1	/^.SH X-WINDOW CONCEPT$/;"	s	title:MiniLibX
X-WINDOW	minilibx/man/man1/mlx_loop.1	/^.SH X-WINDOW EVENTS$/;"	s	title:MiniLibX
X-WINDOW	minilibx/man/man3/mlx.3	/^.SH X-WINDOW CONCEPT$/;"	s	title:MiniLibX
X-WINDOW	minilibx/man/man3/mlx_loop.3	/^.SH X-WINDOW EVENTS$/;"	s	title:MiniLibX
XPM	minilibx/man/man1/mlx_new_image.1	/^.SH XPM IMAGES$/;"	s	title:MiniLibX
XPM	minilibx/man/man3/mlx_new_image.3	/^.SH XPM IMAGES$/;"	s	title:MiniLibX
X_ShmAttach	minilibx/mlx_new_image.c	/^#define	X_ShmAttach	/;"	d	file:
add_to_matrix	libft/matrix_utils.c	/^char	**add_to_matrix(char **matrix, char *line)$/;"	f	typeref:typename:char **
all	Makefile	/^all: $(NAME)$/;"	t
all	libft/Makefile	/^all: $(NAME)$/;"	t
all	minilibx/Makefile	/^all	: do_configure$/;"	t
all	minilibx/Makefile.mk	/^all	: $(NAME)$/;"	t
all	minilibx/test/Makefile.mk	/^all: $(NAME)$/;"	t
all_to_trim	libft/ft_strtrim.c	/^static char	*all_to_trim(int start, int len, const char *s1)$/;"	f	typeref:typename:char *	file:
at_exit	minilibx/test/run_tests.sh	/^at_exit() {$/;"	f
bpp	minilibx/mlx_int.h	/^	int				bpp;$/;"	m	struct:s_img	typeref:typename:int
bpp1	minilibx/test/main.c	/^int	bpp1;$/;"	v	typeref:typename:int
bpp2	minilibx/test/main.c	/^int	bpp2;$/;"	v	typeref:typename:int
bpp3	minilibx/test/main.c	/^int	bpp3;$/;"	v	typeref:typename:int
bpp4	minilibx/test/main.c	/^int	bpp4;$/;"	v	typeref:typename:int
cc	Makefile	/^cc = cc -Wall -Wextra -Werror -g $/;"	m
check	minilibx/Makefile.mk	/^check: all$/;"	t
check_null	libft/ft_strtrim.c	/^static char	*check_null(char const *s1)$/;"	f	typeref:typename:char *	file:
check_to_put	libft/ft_printf.c	/^int	check_to_put(char c, va_list lst)$/;"	f	typeref:typename:int
checksize	libft/ft_putnbr_base.c	/^static int	checksize(unsigned int temp, int size)$/;"	f	typeref:typename:int	file:
checksize_long	libft/ft_putnbr_base.c	/^static int	checksize_long(unsigned long int temp, int size)$/;"	f	typeref:typename:int	file:
clean	Makefile	/^clean:$/;"	t
clean	libft/Makefile	/^clean:$/;"	t
clean	minilibx/Makefile	/^clean	:$/;"	t
clean	minilibx/Makefile.mk	/^clean	:$/;"	t
clean	minilibx/configure	/^clean(){$/;"	f
clean	minilibx/test/Makefile.mk	/^clean:$/;"	t
cmap	minilibx/mlx_int.h	/^	Colormap	cmap;$/;"	m	struct:s_xvar	typeref:typename:Colormap
col	minilibx/mlx_int.h	/^	int		col;$/;"	m	struct:s_xpm_col	typeref:typename:int
color	minilibx/mlx_int.h	/^	int		color;$/;"	m	struct:s_col_name	typeref:typename:int
color_map_1	minilibx/test/main.c	/^int	color_map_1(void *win,int w,int h)$/;"	f	typeref:typename:int
color_map_2	minilibx/test/main.c	/^int	color_map_2(unsigned char *data,int bpp,int sl,int w,int h,int endian, int type)$/;"	f	typeref:typename:int
content	libft/libft.h	/^	void			*content;$/;"	m	struct:s_list	typeref:typename:void *
create_sub_str	libft/ft_split.c	/^static char	*create_sub_str(int start, char const *s, char c)$/;"	f	typeref:typename:char *	file:
cut_string	libft/str_utils3.c	/^char	*cut_string(int len, char *str)$/;"	f	typeref:typename:char *
data	minilibx/mlx_int.h	/^	char			*data;$/;"	m	struct:s_img	typeref:typename:char *
data1	minilibx/test/main.c	/^char	*data1;$/;"	v	typeref:typename:char *
data2	minilibx/test/main.c	/^char	*data2;$/;"	v	typeref:typename:char *
data3	minilibx/test/main.c	/^char	*data3;$/;"	v	typeref:typename:char *
data4	minilibx/test/main.c	/^char	*data4;$/;"	v	typeref:typename:char *
decrgb	minilibx/mlx_int.h	/^	int			decrgb[6];$/;"	m	struct:s_xvar	typeref:typename:int[6]
depth	minilibx/mlx_int.h	/^	int			depth;$/;"	m	struct:s_xvar	typeref:typename:int
dir	Includes/structs.h	/^	t_pos		dir; \/\/ 0, 50, 2$/;"	m	struct:s_player	typeref:typename:t_pos
display	minilibx/mlx_int.h	/^	Display		*display;$/;"	m	struct:s_xvar	typeref:typename:Display *
do_configure	minilibx/Makefile	/^do_configure	:$/;"	t
do_flush	minilibx/mlx_int.h	/^	int			do_flush;$/;"	m	struct:s_xvar	typeref:typename:int
e_bool	libft/libft.h	/^typedef enum e_bool$/;"	g
end_loop	minilibx/mlx_int.h	/^	int 		end_loop;$/;"	m	struct:s_xvar	typeref:typename:int
endian1	minilibx/test/main.c	/^int	endian1;$/;"	v	typeref:typename:int
endian2	minilibx/test/main.c	/^int	endian2;$/;"	v	typeref:typename:int
endian3	minilibx/test/main.c	/^int	endian3;$/;"	v	typeref:typename:int
endian4	minilibx/test/main.c	/^int	endian4;$/;"	v	typeref:typename:int
err	srcs/error_management.c	/^void	err(char *msg)$/;"	f	typeref:typename:void
expose_hook	minilibx/mlx_int.h	/^	int					(*expose_hook)();$/;"	m	struct:s_win_list	typeref:typename:int (*)()
expose_param	minilibx/mlx_int.h	/^	void				*expose_param;$/;"	m	struct:s_win_list	typeref:typename:void *
expose_win1	minilibx/test/main.c	/^int	expose_win1(void *p)$/;"	f	typeref:typename:int
expose_win2	minilibx/test/main.c	/^int	expose_win2(void *p)$/;"	f	typeref:typename:int
fclean	Makefile	/^fclean: clean$/;"	t
fclean	libft/Makefile	/^fclean: clean$/;"	t
fd	Includes/structs.h	/^	int		fd;$/;"	m	struct:s_input	typeref:typename:int
file_len	Includes/structs.h	/^	int		file_len;$/;"	m	struct:s_input	typeref:typename:int
file_size	parsing/map_check.c	/^static void	file_size(char *map_path, t_game *game)$/;"	f	typeref:typename:void	file:
find_first	libft/str_utils2.c	/^int	find_first(char *str, char c)$/;"	f	typeref:typename:int
find_last	libft/str_utils2.c	/^int	find_last(char *str, char c)$/;"	f	typeref:typename:int
format	minilibx/mlx_int.h	/^	int				format;$/;"	m	struct:s_img	typeref:typename:int
free_strdup	libft/str_utils4.c	/^char	*free_strdup(char *str, char **freestr)$/;"	f	typeref:typename:char *
free_strrchr	libft/str_utils3.c	/^char	*free_strrchr(char *str, char c, int **offset)$/;"	f	typeref:typename:char *
ft_atoi	libft/ft_atoi.c	/^int	ft_atoi(const char *nptr)$/;"	f	typeref:typename:int
ft_bzero	libft/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f	typeref:typename:void
ft_calloc	libft/ft_calloc.c	/^void	*ft_calloc(size_t nmemb, size_t size)$/;"	f	typeref:typename:void *
ft_check_len	libft/ft_itoa.c	/^static int	ft_check_len(long n)$/;"	f	typeref:typename:int	file:
ft_check_len	libft/ft_unsigned_itoa.c	/^static int	ft_check_len(long n)$/;"	f	typeref:typename:int	file:
ft_correctline	libft/get_next_line_utils_bonus.c	/^char	*ft_correctline(char *old_str)$/;"	f	typeref:typename:char *
ft_free_matrix	libft/matrix_utils.c	/^void	ft_free_matrix(char **matrix)$/;"	f	typeref:typename:void
ft_freestrtrim	libft/ft_strtrim.c	/^char	*ft_freestrtrim(char *s1, char *set)$/;"	f	typeref:typename:char *
ft_freesubstr	libft/ft_freesubstr.c	/^char	*ft_freesubstr(char *s, unsigned int start, size_t len)$/;"	f	typeref:typename:char *
ft_isalnum	libft/ft_isalnum.c	/^int	ft_isalnum(int c)$/;"	f	typeref:typename:int
ft_isalpha	libft/ft_isalpha.c	/^int	ft_isalpha(int c)$/;"	f	typeref:typename:int
ft_isascii	libft/ft_isascii.c	/^int	ft_isascii(int c)$/;"	f	typeref:typename:int
ft_isdigit	libft/ft_isdigit.c	/^int	ft_isdigit(int c)$/;"	f	typeref:typename:int
ft_isinset	libft/str_utils2.c	/^int	ft_isinset(char c, char *set)$/;"	f	typeref:typename:int
ft_islimiter	libft/type_check.c	/^t_bool	ft_islimiter(char c)$/;"	f	typeref:typename:t_bool
ft_isprint	libft/ft_isprint.c	/^int	ft_isprint(int c)$/;"	f	typeref:typename:int
ft_isquote	libft/type_check.c	/^t_bool	ft_isquote(char c)$/;"	f	typeref:typename:t_bool
ft_isspace	libft/space_utils.c	/^t_bool	ft_isspace(char c)$/;"	f	typeref:typename:t_bool
ft_itoa	libft/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f	typeref:typename:char *
ft_lstadd_back	libft/ft_lstadd_back.c	/^void	ft_lstadd_back(t_list **lst, t_list *new)$/;"	f	typeref:typename:void
ft_lstadd_front	libft/ft_lstadd_front.c	/^void	ft_lstadd_front(t_list **lst, t_list *new)$/;"	f	typeref:typename:void
ft_lstclear	libft/ft_lstclear.c	/^void	ft_lstclear(t_list **lst, void (*del)(void*))$/;"	f	typeref:typename:void
ft_lstdelone	libft/ft_lstdelone.c	/^void	ft_lstdelone(t_list *lst, void (*del)(void*))$/;"	f	typeref:typename:void
ft_lstiter	libft/ft_lstiter.c	/^void	ft_lstiter(t_list *lst, void (*f)(void *))$/;"	f	typeref:typename:void
ft_lstlast	libft/ft_lstlast.c	/^t_list	*ft_lstlast(t_list *lst)$/;"	f	typeref:typename:t_list *
ft_lstmap	libft/ft_lstmap.c	/^t_list	*ft_lstmap(t_list *lst, void *(*f)(void *), void (*del)(void *))$/;"	f	typeref:typename:t_list *
ft_lstnew	libft/ft_lstnew.c	/^t_list	*ft_lstnew(void *content)$/;"	f	typeref:typename:t_list *
ft_lstsize	libft/ft_lstsize.c	/^int	ft_lstsize(t_list *lst)$/;"	f	typeref:typename:int
ft_matrix_len	libft/matrix_utils.c	/^int	ft_matrix_len(char **matrix)$/;"	f	typeref:typename:int
ft_memchr	libft/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f	typeref:typename:void *
ft_memcmp	libft/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f	typeref:typename:int
ft_memcpy	libft/ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *src, size_t n)$/;"	f	typeref:typename:void *
ft_memmove	libft/ft_memmove.c	/^void	*ft_memmove(void *dest, const void *src, size_t n)$/;"	f	typeref:typename:void *
ft_memset	libft/ft_memset.c	/^void	*ft_memset(void *s, int c, size_t n)$/;"	f	typeref:typename:void *
ft_newstrjoin	libft/get_next_line_utils_bonus.c	/^char	*ft_newstrjoin(char *old_str, char *buf)$/;"	f	typeref:typename:char *
ft_printf	libft/ft_printf.c	/^int	ft_printf(const char *format, ...)$/;"	f	typeref:typename:int
ft_put_pointer	libft/ft_putnbr_base.c	/^int	ft_put_pointer(unsigned long int poi)$/;"	f	typeref:typename:int
ft_putchar	libft/ft_printf_utils.c	/^int	ft_putchar(char c)$/;"	f	typeref:typename:int
ft_putchar_fd	libft/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f	typeref:typename:void
ft_putendl_fd	libft/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_putnbr	libft/ft_putnbr_fd.c	/^static void	ft_putnbr(int nb, int fd)$/;"	f	typeref:typename:void	file:
ft_putnbr_base	libft/ft_putnbr_base.c	/^int	ft_putnbr_base(unsigned int nbr, char *base)$/;"	f	typeref:typename:int
ft_putnbr_base_long	libft/ft_putnbr_base.c	/^int	ft_putnbr_base_long(unsigned long nbr, char *base)$/;"	f	typeref:typename:int
ft_putnbr_fd	libft/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f	typeref:typename:void
ft_putstr	libft/ft_printf_utils.c	/^int	ft_putstr(char *str)$/;"	f	typeref:typename:int
ft_putstr_fd	libft/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f	typeref:typename:void
ft_putstr_nofree	libft/ft_printf_utils.c	/^int	ft_putstr_nofree(char *str)$/;"	f	typeref:typename:int
ft_read	libft/get_next_line_bonus.c	/^char	*ft_read(char *old_str, int fd)$/;"	f	typeref:typename:char *
ft_resto	libft/get_next_line_utils_bonus.c	/^char	*ft_resto(char *old_str)$/;"	f	typeref:typename:char *
ft_result	libft/str_utils2.c	/^static char	*ft_result(char *s1, size_t start, size_t end, int *trimmed)$/;"	f	typeref:typename:char *	file:
ft_skipstring	libft/str_utils4.c	/^char	*ft_skipstring(int offset, char *str)$/;"	f	typeref:typename:char *
ft_split	libft/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f	typeref:typename:char **
ft_strchr	libft/ft_strchr.c	/^char	*ft_strchr(char *str, int c)$/;"	f	typeref:typename:char *
ft_strcmp	libft/ft_strcmp.c	/^int	ft_strcmp(const char *s1, const char *s2)$/;"	f	typeref:typename:int
ft_strdup	libft/ft_strdup.c	/^char	*ft_strdup(char *s)$/;"	f	typeref:typename:char *
ft_striteri	libft/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char*))$/;"	f	typeref:typename:void
ft_strjoin	libft/ft_strjoin.c	/^char	*ft_strjoin(char *s1, char *s2)$/;"	f	typeref:typename:char *
ft_strjoin_2	libft/str_utils.c	/^char	*ft_strjoin_2(char *old_str, char *buf)$/;"	f	typeref:typename:char *
ft_strjoin_2free	libft/str_utils.c	/^char	*ft_strjoin_2free(char *old_str, char *buf)$/;"	f	typeref:typename:char *
ft_strlcat	libft/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, char *src, size_t size)$/;"	f	typeref:typename:size_t
ft_strlcpy	libft/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, char *src, size_t size)$/;"	f	typeref:typename:size_t
ft_strlen	libft/ft_strlen.c	/^size_t	ft_strlen(char *s)$/;"	f	typeref:typename:size_t
ft_strlen_noquote	libft/str_utils.c	/^int	ft_strlen_noquote(char *str)$/;"	f	typeref:typename:int
ft_strmapi	libft/ft_strmapi.c	/^char	*ft_strmapi(char *s, char (*f)(unsigned int, char))$/;"	f	typeref:typename:char *
ft_strncmp	libft/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f	typeref:typename:int
ft_strncpy	libft/str_utils3.c	/^char	*ft_strncpy(char *str, int start, int end)$/;"	f	typeref:typename:char *
ft_strndup	libft/str_utils.c	/^char	*ft_strndup(char *str, int i)$/;"	f	typeref:typename:char *
ft_strnstr	libft/ft_strnstr.c	/^char	*ft_strnstr(const char *big, char *little, size_t len)$/;"	f	typeref:typename:char *
ft_strrchr	libft/ft_strrchr.c	/^char	*ft_strrchr(char *str, int c)$/;"	f	typeref:typename:char *
ft_strtrim	libft/ft_strtrim.c	/^char	*ft_strtrim(char *s1, char *set)$/;"	f	typeref:typename:char *
ft_strtrimfree	libft/str_utils2.c	/^char	*ft_strtrimfree(char *s1, char *set, int *trimmed)$/;"	f	typeref:typename:char *
ft_substr	libft/ft_substr.c	/^char	*ft_substr(char *s, unsigned int start, size_t len)$/;"	f	typeref:typename:char *
ft_tolower	libft/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f	typeref:typename:int
ft_toupper	libft/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f	typeref:typename:int
ft_unsigned_itoa	libft/ft_unsigned_itoa.c	/^char	*ft_unsigned_itoa(unsigned int n)$/;"	f	typeref:typename:char *
gc	minilibx/mlx_int.h	/^	GC					gc;$/;"	m	struct:s_win_list	typeref:typename:GC
gc	minilibx/mlx_int.h	/^	GC				gc;$/;"	m	struct:s_img	typeref:typename:GC
gere_mouse	minilibx/test/new_win.c	/^int gere_mouse(int x,int y,int button,void*toto)$/;"	f	typeref:typename:int
get_next_line	libft/get_next_line_bonus.c	/^char	*get_next_line(int fd)$/;"	f	typeref:typename:char *
get_next_line2	libft/get_next_line2.c	/^int	get_next_line2(int fd, char **line)$/;"	f	typeref:typename:int
get_textures	parsing/var_init.c	/^void	get_textures(t_game *game)$/;"	f	typeref:typename:void
get_xlib_include_path	minilibx/configure	/^get_xlib_include_path(){$/;"	f
height	Includes/structs.h	/^	int		height;$/;"	m	struct:s_img	typeref:typename:int
height	minilibx/mlx_int.h	/^	int				height;$/;"	m	struct:s_img	typeref:typename:int
hook	minilibx/mlx_int.h	/^	int		(*hook)();$/;"	m	struct:s_event_list	typeref:typename:int (*)()
hooks	minilibx/mlx_int.h	/^	t_event_list		hooks[MLX_MAX_EVENT];$/;"	m	struct:s_win_list	typeref:typename:t_event_list[]
i	Includes/structs.h	/^	int		i;$/;"	m	struct:s_curs	typeref:typename:int
im1	minilibx/test/main.c	/^void    *im1;$/;"	v	typeref:typename:void *
im2	minilibx/test/main.c	/^void	*im2;$/;"	v	typeref:typename:void *
im3	minilibx/test/main.c	/^void	*im3;$/;"	v	typeref:typename:void *
im4	minilibx/test/main.c	/^void	*im4;$/;"	v	typeref:typename:void *
image	minilibx/mlx_int.h	/^	XImage			*image;$/;"	m	struct:s_img	typeref:typename:XImage *
img	Includes/structs.h	/^	void	*img;$/;"	m	struct:s_img	typeref:typename:void *
imgs	Includes/structs.h	/^	t_img	imgs[7];$/;"	m	struct:s_texture	typeref:typename:t_img[7]
init_game	parsing/var_init.c	/^t_game	init_game(char *map_path)$/;"	f	typeref:typename:t_game
input	Includes/structs.h	/^	t_input		input;$/;"	m	struct:s_game	typeref:typename:t_input
is_in_mtx	libft/matrix_utils.c	/^int	is_in_mtx(char *line, char **matrix)$/;"	f	typeref:typename:int
j	Includes/structs.h	/^	int		j;$/;"	m	struct:s_curs	typeref:typename:int
join_char	libft/str_utils3.c	/^char	*join_char(char *str, char c)$/;"	f	typeref:typename:char *
k	Includes/structs.h	/^	int		k;$/;"	m	struct:s_curs	typeref:typename:int
key_hook	minilibx/mlx_int.h	/^	int					(*key_hook)();$/;"	m	struct:s_win_list	typeref:typename:int (*)()
key_param	minilibx/mlx_int.h	/^	void				*key_param;$/;"	m	struct:s_win_list	typeref:typename:void *
key_win1	minilibx/test/main.c	/^int	key_win1(int key,void *p)$/;"	f	typeref:typename:int
key_win2	minilibx/test/main.c	/^int	key_win2(int key,void *p)$/;"	f	typeref:typename:int
key_win3	minilibx/test/main.c	/^int	key_win3(int key,void *p)$/;"	f	typeref:typename:int
local_endian	minilibx/test/main.c	/^int	local_endian;$/;"	v	typeref:typename:int
log_error	minilibx/configure	/^log_error(){$/;"	f
log_error	minilibx/test/run_tests.sh	/^log_error(){$/;"	f
log_info	minilibx/configure	/^log_info(){$/;"	f
log_info	minilibx/test/run_tests.sh	/^log_info(){$/;"	f
logging	minilibx/configure	/^logging(){$/;"	f
logging	minilibx/test/run_tests.sh	/^logging(){$/;"	f
loop_hook	minilibx/mlx_int.h	/^	int			(*loop_hook)();$/;"	m	struct:s_xvar	typeref:typename:int (*)()
loop_param	minilibx/mlx_int.h	/^	void		*loop_param;$/;"	m	struct:s_xvar	typeref:typename:void *
main	minilibx/configure	/^main(){$/;"	f
main	minilibx/test/main.c	/^int	main()$/;"	f	typeref:typename:int
main	minilibx/test/new_win.c	/^int main()$/;"	f	typeref:typename:int
main	minilibx/test/run_tests.sh	/^main(){$/;"	f
main	srcs/main.c	/^int	main(int ac, char **av)$/;"	f	typeref:typename:int
make_number	libft/ft_itoa.c	/^static char	*make_number(int num_len, long b)$/;"	f	typeref:typename:char *	file:
make_number	libft/ft_unsigned_itoa.c	/^static char	*make_number(int num_len, long b)$/;"	f	typeref:typename:char *	file:
map	Includes/structs.h	/^	char		**map;$/;"	m	struct:s_game	typeref:typename:char **
map_and_txt	Includes/structs.h	/^	char	**map_and_txt;$/;"	m	struct:s_input	typeref:typename:char **
map_height	Includes/structs.h	/^	int			map_height;$/;"	m	struct:s_game	typeref:typename:int
map_starts	Includes/structs.h	/^	t_bool	map_starts;$/;"	m	struct:s_input	typeref:typename:t_bool
map_width	Includes/structs.h	/^	int			map_width;$/;"	m	struct:s_game	typeref:typename:int
mask	minilibx/mlx_int.h	/^	int		mask;$/;"	m	struct:s_event_list	typeref:typename:int
mlx	Includes/structs.h	/^	void		*mlx;$/;"	m	struct:s_game	typeref:typename:void *
mlx	minilibx/test/main.c	/^void	*mlx;$/;"	v	typeref:typename:void *
mlx	minilibx/test/new_win.c	/^void *mlx;$/;"	v	typeref:typename:void *
mlx_X_error	minilibx/mlx_new_image.c	/^int	mlx_X_error;$/;"	v	typeref:typename:int
mlx_clear_window	minilibx/mlx_clear_window.c	/^int		mlx_clear_window(t_xvar *xvar,t_win_list *win)$/;"	f	typeref:typename:int
mlx_col_name	minilibx/mlx_rgb.c	/^struct s_col_name mlx_col_name[] =$/;"	v	typeref:struct:s_col_name[]
mlx_destroy_display	minilibx/mlx_destroy_display.c	/^int	mlx_destroy_display(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_destroy_image	minilibx/mlx_destroy_image.c	/^int	mlx_destroy_image(t_xvar *xvar, t_img *img)$/;"	f	typeref:typename:int
mlx_destroy_window	minilibx/mlx_destroy_window.c	/^int	mlx_destroy_window(t_xvar *xvar,t_win_list *win)$/;"	f	typeref:typename:int
mlx_do_key_autorepeatoff	minilibx/mlx_hook.c	/^int	mlx_do_key_autorepeatoff(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_do_key_autorepeaton	minilibx/mlx_hook.c	/^int	mlx_do_key_autorepeaton(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_do_sync	minilibx/mlx_hook.c	/^int	mlx_do_sync(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_expose_hook	minilibx/mlx_expose_hook.c	/^int		mlx_expose_hook(t_win_list *win,int (*funct)(),void *param)$/;"	f	typeref:typename:int
mlx_ext_fullscreen	minilibx/mlx_ext_randr.c	/^int			mlx_ext_fullscreen(t_xvar *xvar, t_win_list *win, int fullscreen)$/;"	f	typeref:typename:int
mlx_flush_event	minilibx/mlx_flush_event.c	/^int	mlx_flush_event(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_get_color_value	minilibx/mlx_get_color_value.c	/^int             mlx_get_color_value(t_xvar *xvar,int color)$/;"	f	typeref:typename:int
mlx_get_data_addr	minilibx/mlx_get_data_addr.c	/^char	*mlx_get_data_addr(t_img *img,int *bits_per_pixel,$/;"	f	typeref:typename:char *
mlx_get_screen_size	minilibx/mlx_screen_size.c	/^int		mlx_get_screen_size(void *mlx_ptr, int *sizex, int *sizey)$/;"	f	typeref:typename:int
mlx_hook	minilibx/mlx_hook.c	/^int	mlx_hook(t_win_list *win, int x_event, int x_mask, $/;"	f	typeref:typename:int
mlx_init	minilibx/mlx_init.c	/^void	*mlx_init()$/;"	f	typeref:typename:void *
mlx_int_anti_resize_win	minilibx/mlx_int_anti_resize_win.c	/^int	mlx_int_anti_resize_win(t_xvar *xvar,Window win,int w,int h)$/;"	f	typeref:typename:int
mlx_int_deal_shm	minilibx/mlx_init.c	/^int		mlx_int_deal_shm(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_int_do_nothing	minilibx/mlx_int_do_nothing.c	/^int	mlx_int_do_nothing(void *param)$/;"	f	typeref:typename:int
mlx_int_egal_img	minilibx/mlx_lib_xpm.c	/^int	mlx_int_egal_img(XImage *img1,XImage *img2)$/;"	f	typeref:typename:int
mlx_int_file_get_rid_comment	minilibx/mlx_xpm.c	/^int	mlx_int_file_get_rid_comment(char *ptr, int size)$/;"	f	typeref:typename:int
mlx_int_get_col_name	minilibx/mlx_xpm.c	/^int	mlx_int_get_col_name(char *str,int size)$/;"	f	typeref:typename:int
mlx_int_get_good_color	minilibx/mlx_get_color_value.c	/^int		mlx_int_get_good_color(t_xvar *xvar,int color)$/;"	f	typeref:typename:int
mlx_int_get_line	minilibx/mlx_xpm.c	/^char	*mlx_int_get_line(char *ptr,int *pos,int size)$/;"	f	typeref:typename:char *
mlx_int_get_text_rgb	minilibx/mlx_xpm.c	/^int	mlx_int_get_text_rgb(char *name, char *end)$/;"	f	typeref:typename:int
mlx_int_get_visual	minilibx/mlx_int_get_visual.c	/^int		mlx_int_get_visual(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_int_new_image	minilibx/mlx_new_image.c	/^void	*mlx_int_new_image(t_xvar *xvar,int width, int height,int format)$/;"	f	typeref:typename:void *
mlx_int_new_xshm_image	minilibx/mlx_new_image.c	/^void	*mlx_int_new_xshm_image(t_xvar *xvar,int width,int height,int format)$/;"	f	typeref:typename:void *
mlx_int_param_ButtonPress	minilibx/mlx_int_param_event.c	/^int	mlx_int_param_ButtonPress(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f	typeref:typename:int
mlx_int_param_ButtonRelease	minilibx/mlx_int_param_event.c	/^int	mlx_int_param_ButtonRelease(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f	typeref:typename:int
mlx_int_param_Expose	minilibx/mlx_int_param_event.c	/^int	mlx_int_param_Expose(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f	typeref:typename:int
mlx_int_param_KeyPress	minilibx/mlx_int_param_event.c	/^int	mlx_int_param_KeyPress(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f	typeref:typename:int
mlx_int_param_KeyRelease	minilibx/mlx_int_param_event.c	/^int	mlx_int_param_KeyRelease(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f	typeref:typename:int
mlx_int_param_MotionNotify	minilibx/mlx_int_param_event.c	/^int	mlx_int_param_MotionNotify(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f	typeref:typename:int
mlx_int_param_event	minilibx/mlx_int_param_event.c	/^int	(*(mlx_int_param_event[]))() =$/;"	v	typeref:typename:int (* ([]))()
mlx_int_param_generic	minilibx/mlx_int_param_event.c	/^int	mlx_int_param_generic(t_xvar *xvar, XEvent *ev, t_win_list *win)$/;"	f	typeref:typename:int
mlx_int_param_undef	minilibx/mlx_int_param_event.c	/^int	mlx_int_param_undef()$/;"	f	typeref:typename:int
mlx_int_parse_xpm	minilibx/mlx_xpm.c	/^void	*mlx_int_parse_xpm(t_xvar *xvar,void *info,int info_size,char *(*f)())$/;"	f	typeref:typename:void *
mlx_int_rgb_conversion	minilibx/mlx_init.c	/^int		mlx_int_rgb_conversion(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_int_set_win_event_mask	minilibx/mlx_int_set_win_event_mask.c	/^int	mlx_int_set_win_event_mask(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_int_static_line	minilibx/mlx_xpm.c	/^char	*mlx_int_static_line(char **xpm_data,int *pos,int size)$/;"	f	typeref:typename:char *
mlx_int_str_str	minilibx/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str(char *str,char *find,int len)$/;"	f	typeref:typename:int
mlx_int_str_str_cote	minilibx/mlx_int_str_to_wordtab.c	/^int	mlx_int_str_str_cote(char *str,char *find,int len)$/;"	f	typeref:typename:int
mlx_int_str_to_wordtab	minilibx/mlx_int_str_to_wordtab.c	/^char	**mlx_int_str_to_wordtab(char *str)$/;"	f	typeref:typename:char **
mlx_int_wait_first_expose	minilibx/mlx_int_wait_first_expose.c	/^int	mlx_int_wait_first_expose(t_xvar *xvar,Window win)$/;"	f	typeref:typename:int
mlx_int_xpm_f_image	minilibx/mlx_lib_xpm.c	/^void		*mlx_int_xpm_f_image(t_xvar *xvar,int *width,int *height,$/;"	f	typeref:typename:void *
mlx_int_xpm_set_pixel	minilibx/mlx_xpm.c	/^int	mlx_int_xpm_set_pixel(t_img *img, char *data, int opp, int col, int x)$/;"	f	typeref:typename:int
mlx_key_hook	minilibx/mlx_key_hook.c	/^int		mlx_key_hook(t_win_list *win,int (*funct)(),void *param)$/;"	f	typeref:typename:int
mlx_loop	minilibx/mlx_loop.c	/^int			mlx_loop(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_loop_end	minilibx/mlx_loop.c	/^int			mlx_loop_end(t_xvar *xvar)$/;"	f	typeref:typename:int
mlx_loop_hook	minilibx/mlx_loop_hook.c	/^int	mlx_loop_hook(t_xvar *xvar,int (*funct)(),void *param)$/;"	f	typeref:typename:int
mlx_mouse_get_pos	minilibx/mlx_mouse.c	/^int		mlx_mouse_get_pos(t_xvar *xvar, t_win_list *win, \\$/;"	f	typeref:typename:int
mlx_mouse_hide	minilibx/mlx_mouse.c	/^int		mlx_mouse_hide(t_xvar *xvar, t_win_list *win)$/;"	f	typeref:typename:int
mlx_mouse_hook	minilibx/mlx_mouse_hook.c	/^int		mlx_mouse_hook(t_win_list *win,int (*funct)(),void *param)$/;"	f	typeref:typename:int
mlx_mouse_move	minilibx/mlx_mouse.c	/^int		mlx_mouse_move(t_xvar *xvar, t_win_list *win, int x, int y)$/;"	f	typeref:typename:int
mlx_mouse_show	minilibx/mlx_mouse.c	/^int		mlx_mouse_show(t_xvar *xvar, t_win_list *win)$/;"	f	typeref:typename:int
mlx_new_image	minilibx/mlx_new_image.c	/^void	*mlx_new_image(t_xvar *xvar,int width, int height)$/;"	f	typeref:typename:void *
mlx_new_image2	minilibx/mlx_new_image.c	/^void	*mlx_new_image2(t_xvar *xvar,int width, int height)$/;"	f	typeref:typename:void *
mlx_new_window	minilibx/mlx_new_window.c	/^void	*mlx_new_window(t_xvar *xvar,int size_x,int size_y,char *title)$/;"	f	typeref:typename:void *
mlx_pixel_put	minilibx/mlx_pixel_put.c	/^int		mlx_pixel_put(t_xvar *xvar,t_win_list *win,$/;"	f	typeref:typename:int
mlx_put_image_to_window	minilibx/mlx_put_image_to_window.c	/^int	mlx_put_image_to_window(t_xvar *xvar,t_win_list *win,t_img *img,$/;"	f	typeref:typename:int
mlx_set_font	minilibx/mlx_set_font.c	/^void	mlx_set_font(t_xvar *xvar, t_win_list *win, char *name)$/;"	f	typeref:typename:void
mlx_string_put	minilibx/mlx_string_put.c	/^int		mlx_string_put(t_xvar *xvar,t_win_list *win,$/;"	f	typeref:typename:int
mlx_xpm_file_to_image	minilibx/mlx_lib_xpm.c	/^void	*mlx_xpm_file_to_image(t_xvar *xvar,char *filename,$/;"	f	typeref:typename:void *
mlx_xpm_file_to_image	minilibx/mlx_xpm.c	/^void	*mlx_xpm_file_to_image(t_xvar *xvar,char *file,int *width,int *height)$/;"	f	typeref:typename:void *
mlx_xpm_to_image	minilibx/mlx_lib_xpm.c	/^void	*mlx_xpm_to_image(t_xvar *xvar,char **data,int *width,int *height)$/;"	f	typeref:typename:void *
mlx_xpm_to_image	minilibx/mlx_xpm.c	/^void	*mlx_xpm_to_image(t_xvar *xvar,char **xpm_data,int *width,int *height)$/;"	f	typeref:typename:void *
mouse_hook	minilibx/mlx_int.h	/^	int					(*mouse_hook)();$/;"	m	struct:s_win_list	typeref:typename:int (*)()
mouse_param	minilibx/mlx_int.h	/^	void				*mouse_param;$/;"	m	struct:s_win_list	typeref:typename:void *
mouse_win1	minilibx/test/main.c	/^int	mouse_win1(int button,int x,int y, void *p)$/;"	f	typeref:typename:int
mouse_win2	minilibx/test/main.c	/^int	mouse_win2(int button,int x,int y, void *p)$/;"	f	typeref:typename:int
mouse_win3	minilibx/test/main.c	/^int	mouse_win3(int x,int y, void *p)$/;"	f	typeref:typename:int
name	minilibx/mlx_int.h	/^	char	*name;$/;"	m	struct:s_col_name	typeref:typename:char *
name	minilibx/mlx_int.h	/^	int		name;$/;"	m	struct:s_xpm_col	typeref:typename:int
next	libft/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list *
next	minilibx/mlx_int.h	/^	struct s_win_list	*next;$/;"	m	struct:s_win_list	typeref:struct:s_win_list *
param	minilibx/mlx_int.h	/^	void	*param;$/;"	m	struct:s_event_list	typeref:typename:void *
parse_args	minilibx/configure	/^parse_args(){$/;"	f
parse_line	parsing/splut.c	/^int	parse_line(char *line, t_game *game)$/;"	f	typeref:typename:int
parse_map	parsing/map_check.c	/^char	**parse_map(char *map_path, t_game *game)$/;"	f	typeref:typename:char **
pix	minilibx/mlx_int.h	/^	Pixmap			pix;$/;"	m	struct:s_img	typeref:typename:Pixmap
plane	Includes/structs.h	/^	t_pos		plane; \/\/ 0, 1, 0$/;"	m	struct:s_player	typeref:typename:t_pos
plane	raycasting/plane.c	/^void	plane(t_pos pos, t_pos dir, t_pos plane)$/;"	f	typeref:typename:void
play	Makefile	/^play:$/;"	t
player	Includes/structs.h	/^	t_player	player;$/;"	m	struct:s_game	typeref:typename:t_player
pos	Includes/structs.h	/^	t_pos		pos; \/\/ 0, 50, 0$/;"	m	struct:s_player	typeref:typename:t_pos
print_matrix	libft/space_utils.c	/^t_bool	print_matrix(char **mtx)$/;"	f	typeref:typename:t_bool
private_cmap	minilibx/mlx_int.h	/^	int			private_cmap;$/;"	m	struct:s_xvar	typeref:typename:int
pshm_format	minilibx/mlx_int.h	/^	int			pshm_format;$/;"	m	struct:s_xvar	typeref:typename:int
put_xmp	srcs/put_images.c	/^void	*put_xmp(void *mlx, char *filename, int *width, int *height)$/;"	f	typeref:typename:void *
re	Makefile	/^re: fclean all$/;"	t
re	libft/Makefile	/^re: fclean all$/;"	t
re	minilibx/Makefile	/^re	: clean all$/;"	t
re	minilibx/test/Makefile.mk	/^re: clean all$/;"	t
rem_from_matrix	libft/matrix_utils.c	/^char	**rem_from_matrix(char **matrix, int index)$/;"	f	typeref:typename:char **
root	minilibx/mlx_int.h	/^	Window		root;$/;"	m	struct:s_xvar	typeref:typename:Window
s_col_name	minilibx/mlx_int.h	/^struct	s_col_name$/;"	s
s_curs	Includes/structs.h	/^typedef struct s_curs$/;"	s
s_event_list	minilibx/mlx_int.h	/^typedef struct	s_event_list$/;"	s
s_game	Includes/structs.h	/^typedef struct s_game$/;"	s
s_img	Includes/structs.h	/^typedef struct s_img$/;"	s
s_img	minilibx/mlx_int.h	/^typedef struct	s_img$/;"	s
s_input	Includes/structs.h	/^typedef struct s_input$/;"	s
s_list	libft/libft.h	/^typedef struct s_list$/;"	s
s_player	Includes/structs.h	/^typedef struct s_player$/;"	s
s_pos	Includes/structs.h	/^typedef struct s_pos$/;"	s
s_texture	Includes/structs.h	/^typedef struct s_texture$/;"	s
s_win_list	minilibx/mlx_int.h	/^typedef struct	s_win_list$/;"	s
s_xpm_col	minilibx/mlx_int.h	/^typedef	struct	s_xpm_col$/;"	s
s_xvar	minilibx/mlx_int.h	/^typedef struct	s_xvar$/;"	s
saved_mode	minilibx/mlx_ext_randr.c	/^RRMode	saved_mode = 0;$/;"	v	typeref:typename:RRMode
screen	minilibx/mlx_int.h	/^	int			screen;$/;"	m	struct:s_xvar	typeref:typename:int
shm	minilibx/mlx_int.h	/^	XShmSegmentInfo	shm;$/;"	m	struct:s_img	typeref:typename:XShmSegmentInfo
shm_att_pb	minilibx/mlx_new_image.c	/^int	shm_att_pb(Display *d,XErrorEvent *ev)$/;"	f	typeref:typename:int
show	minilibx/Makefile.mk	/^show:$/;"	t
show	minilibx/test/Makefile.mk	/^show:$/;"	t
show_help	minilibx/configure	/^show_help(){$/;"	f
sigint_handler	minilibx/test/run_tests.sh	/^sigint_handler(){$/;"	f
size_line	minilibx/mlx_int.h	/^	int				size_line;$/;"	m	struct:s_img	typeref:typename:int
skip_spaces	libft/space_utils.c	/^void	skip_spaces(char **str)$/;"	f	typeref:typename:void
skip_spaces2	libft/space_utils.c	/^int	skip_spaces2(char *str)$/;"	f	typeref:typename:int
sl1	minilibx/test/main.c	/^int	sl1;$/;"	v	typeref:typename:int
sl2	minilibx/test/main.c	/^int	sl2;$/;"	v	typeref:typename:int
sl3	minilibx/test/main.c	/^int	sl3;$/;"	v	typeref:typename:int
sl4	minilibx/test/main.c	/^int	sl4;$/;"	v	typeref:typename:int
split_map	parsing/splut.c	/^void	split_map(t_game *game)$/;"	f	typeref:typename:void
stamp	libft/ft_putnbr_fd.c	/^static void	stamp(char nb, int fd)$/;"	f	typeref:typename:void	file:
status	Includes/structs.h	/^	int		status;$/;"	m	struct:s_curs	typeref:typename:int
str_count	libft/ft_split.c	/^static int	str_count(const char *s, char c)$/;"	f	typeref:typename:int	file:
strjoin_n_free1	libft/str_utils3.c	/^char	*strjoin_n_free1(char *line, char *buff, int index)$/;"	f	typeref:typename:char *
strlcpy_is_not_posix	minilibx/mlx_xpm.c	/^unsigned int	strlcpy_is_not_posix(char *dest, char *src, unsigned int size)$/;"	f	typeref:typename:unsigned int
t_bool	libft/libft.h	/^}	t_bool;$/;"	t	typeref:enum:e_bool
t_curs	Includes/structs.h	/^}	t_curs;$/;"	t	typeref:struct:s_curs
t_event_list	minilibx/mlx_int.h	/^}				t_event_list;$/;"	t	typeref:struct:s_event_list
t_game	Includes/structs.h	/^}	t_game;$/;"	t	typeref:struct:s_game
t_img	Includes/structs.h	/^}	t_img;$/;"	t	typeref:struct:s_img
t_img	minilibx/mlx_int.h	/^}				t_img;$/;"	t	typeref:struct:s_img
t_input	Includes/structs.h	/^}	t_input;$/;"	t	typeref:struct:s_input
t_list	libft/libft.h	/^}		t_list;$/;"	t	typeref:struct:s_list
t_player	Includes/structs.h	/^}	t_player;$/;"	t	typeref:struct:s_player
t_pos	Includes/structs.h	/^}	t_pos;$/;"	t	typeref:struct:s_pos
t_texture	Includes/structs.h	/^}	t_texture;$/;"	t	typeref:struct:s_texture
t_win_list	minilibx/mlx_int.h	/^}				t_win_list;$/;"	t	typeref:struct:s_win_list
t_xpm_col	minilibx/mlx_int.h	/^}				t_xpm_col;$/;"	t	typeref:struct:s_xpm_col
t_xvar	minilibx/mlx_int.h	/^}				t_xvar;$/;"	t	typeref:struct:s_xvar
test_default_main	minilibx/test/run_tests.sh	/^test_default_main(){$/;"	f
texture	Includes/structs.h	/^	t_texture	texture;$/;"	m	struct:s_game	typeref:typename:t_texture
texture_names	parsing/var_init.c	/^char	**texture_names(void)$/;"	f	typeref:typename:char **
txt_nm	Includes/structs.h	/^	char	**txt_nm; \/\/alloced in var_init.c$/;"	m	struct:s_texture	typeref:typename:char **
txts	Includes/structs.h	/^	char	**txts;$/;"	m	struct:s_texture	typeref:typename:char **
type	minilibx/mlx_int.h	/^	int				type;$/;"	m	struct:s_img	typeref:typename:int
use_xshm	minilibx/mlx_int.h	/^	int			use_xshm;$/;"	m	struct:s_xvar	typeref:typename:int
val	Makefile	/^val: clean $(SRC)$/;"	t
visual	minilibx/mlx_int.h	/^	Visual		*visual;$/;"	m	struct:s_xvar	typeref:typename:Visual *
width	Includes/structs.h	/^	int		width;$/;"	m	struct:s_img	typeref:typename:int
width	minilibx/mlx_int.h	/^	int				width;$/;"	m	struct:s_img	typeref:typename:int
win	Includes/structs.h	/^	void		*win;$/;"	m	struct:s_game	typeref:typename:void *
win1	minilibx/test/main.c	/^void	*win1;$/;"	v	typeref:typename:void *
win1	minilibx/test/new_win.c	/^void *win1;$/;"	v	typeref:typename:void *
win2	minilibx/test/main.c	/^void    *win2;$/;"	v	typeref:typename:void *
win2	minilibx/test/new_win.c	/^void *win2;$/;"	v	typeref:typename:void *
win3	minilibx/test/main.c	/^void    *win3;$/;"	v	typeref:typename:void *
win_count	minilibx/mlx_loop.c	/^static int	win_count(t_xvar *xvar)$/;"	f	typeref:typename:int	file:
win_list	minilibx/mlx_int.h	/^	t_win_list	*win_list;$/;"	m	struct:s_xvar	typeref:typename:t_win_list *
window	minilibx/mlx_int.h	/^	Window				window;$/;"	m	struct:s_win_list	typeref:typename:Window
wm_delete_window	minilibx/mlx_int.h	/^	Atom		wm_delete_window;$/;"	m	struct:s_xvar	typeref:typename:Atom
wm_protocols	minilibx/mlx_int.h	/^	Atom		wm_protocols;$/;"	m	struct:s_xvar	typeref:typename:Atom
x	Includes/structs.h	/^	double	x;$/;"	m	struct:s_pos	typeref:typename:double
xpm1_x	minilibx/test/main.c	/^int	xpm1_x;$/;"	v	typeref:typename:int
xpm1_y	minilibx/test/main.c	/^int	xpm1_y;$/;"	v	typeref:typename:int
y	Includes/structs.h	/^	double	y;$/;"	m	struct:s_pos	typeref:typename:double
z	Includes/structs.h	/^	double	z;$/;"	m	struct:s_pos	typeref:typename:double
